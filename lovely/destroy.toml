[manifest]
version = "1.0.0"
priority = 0

[vars]

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:shatter()"
position = "after"
payload = '''
'''
match_indent = true

#Credits to VioMarks on Twitter for most of the next lines of code (i made some code too)

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''SMODS.calculate_destroying_cards({ full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, cardarea = v }, cards_destroyed, v == G.play and scoring_hand or nil)'''
position = "at"
payload = '''
local context = { full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, cardarea = v }
local cards_destroyed = cards_destroyed
local scoring_hand = (v == G.play and scoring_hand or v == 'unscored' and unscored_cards or nil)

for i, card in ipairs(context.full_hand) do
	card.ability.played_this_ante = true -- [PILLARFUNCTIONALITY]
end

for i,card in ipairs(scoring_hand or context.cardarea.cards) do
	local destroyed = nil
	--un-highlight all cards
	if scoring_hand then highlight_card(card,(i-0.999)/(#scoring_hand-0.998),'down') end

	-- context.destroying_card calculations
	context.destroy_card = card
	context.destroying_card = scoring_hand and card
	for _, area in ipairs(SMODS.get_card_areas('jokers')) do
		local should_break
		for _, _card in ipairs(area.cards) do
			local eval, post = eval_card(_card, context)
			local self_destroy = false
			for key, effect in pairs(eval) do
				if type(effect) == 'table' then
					self_destroy = SMODS.calculate_effect(effect, card)
				else
					self_destroy = effect
				end
			end
			SMODS.trigger_effects({post}, card)
			if self_destroy then 
				destroyed = true
				should_break = true
				break
			end
		end
		if should_break then break end
	end


	if not G.GAME.probabilities.glass == 0 then
		if scoring_hand and SMODS.has_enhancement(card, 'm_glass') and not card.debuff and pseudorandom('glass') < G.GAME.probabilities.glass/(card.ability.name == 'Glass Card' and card.ability.extra or G.P_CENTERS.m_glass.config.extra) then
			destroyed = true
		end
	end
	
	local eval, post = eval_card(card, context)
	local self_destroy = false
	for key, effect in pairs(eval) do
		self_destroy = SMODS.calculate_effect(effect, card)
	end
	SMODS.trigger_effects({post}, card)
	if self_destroy then destroyed = true end
	
	-- TARGET: card destroyed

	if ((destroyed) and ((not ((next(SMODS.find_card("j_threex_acrylic"))) and (SMODS.has_enhancement(card, 'm_glass'))))))
	or (next(SMODS.find_card('j_threex_living')) and pseudorandom('living') < G.GAME.probabilities.normal/8 and scoring_hand)
	or (next(SMODS.find_card('j_threex_atom')) and G.GAME.current_round.hands_played == 0 and context.full_hand and #context.full_hand == 1 and (not context.full_hand[1]:is_face()) and scoring_hand) then 
		if SMODS.shatters(card) then
			card.shattered = true
		else 
			card.destroyed = true
		end 
		cards_destroyed[#cards_destroyed+1] = card
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "normal = 1,"
position = "after"
payload = "glass = 1"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.effect == 'Glass Card' then loc_vars = {cfg.Xmult, G.GAME.probabilities.normal, cfg.extra}"
position = "at"
payload = "elseif _c.effect == 'Glass Card' then loc_vars = {cfg.Xmult, G.GAME.probabilities.glass, cfg.extra}"
match_indent = false
